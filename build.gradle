// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
    repositories {
        jcenter()
        google()
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:3.6.3'
        classpath 'com.tencent.mm:AndResGuard-gradle-plugin:1.2.17'
        classpath 'com.novoda:bintray-release:0.9.2'
    }
}

allprojects {

    repositories {
        //项目里的aar文件
        flatDir { dirs "libs"/*, "${rootDir}/{ModuleName}/libs"*/ }
        //本地的Maven仓库：{USER_HOME}/.m2/repository，如C:/Users/Administrator/.m2/repository
        mavenLocal()
        //JitPack提供的Maven仓库
        maven { url "https://jitpack.io" }
        //JFrog公司提供的Maven仓库：https://jcenter.bintray.com
        jcenter()
        //谷歌公司提供的Maven仓库：https://maven.google.com
        google()
    }

    //增加一些编译选项
    gradle.projectsEvaluated {
        tasks.withType(JavaCompile) {
            options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
        }
    }
}

subprojects {
    afterEvaluate { def project ->
        ext.pluginContainer = project.getPlugins()
        def hasAppPlugin = ext.pluginContainer.hasPlugin("com.android.application")
        def hasLibPlugin = ext.pluginContainer.hasPlugin("com.android.library")
        configure(project) {
            if (hasAppPlugin || hasLibPlugin) {
                apply from: "${rootDir}/gradle/common.gradle"
            }
            if (hasAppPlugin && appResGuardEnable.toString().equalsIgnoreCase("true")) {
                apply from: "${rootDir}/gradle/resguard.gradle"
            }
            if (hasLibPlugin) {
                apply from: "${rootDir}/gradle/publish.gradle"
            }
        }
    }
}

class BuildTimeListener implements TaskExecutionListener, BuildListener {
    private long timestamp;
    private times = []

    @Override
    void beforeExecute(Task task) {
        timestamp = System.currentTimeMillis()
        println "before Execute" + task.name
    }

    @Override
    void afterExecute(Task task, TaskState taskState) {
        long ms = System.currentTimeMillis() - timestamp;
        //大于1秒的任务进行记录
        if (ms > 1000) {
            times.add([ms, task.path])
        }
        println "after Execute ${task.name}"
        println "UseTimes ${ms} ms"
        println "===================================================="
    }

    @Override
    void buildFinished(BuildResult result) {
        println "build Finished:"
        times.sort { it[0] }
        for (time in times) {
            printf "%7sms  %s\n", time
        }
    }

    @Override
    void buildStarted(Gradle gradle) {
        println "build Started"
    }

    @Override
    void projectsEvaluated(Gradle gradle) {
        println "projects Evaluated";
    }

    @Override
    void projectsLoaded(Gradle gradle) {
        println "projects Loaded"
    }

    @Override
    void settingsEvaluated(Settings settings) {
        println "settings Evaluated"
    }
}

project.gradle.addListener(new BuildTimeListener())

task clean(type: Delete) {
    println("********** delete all compile **********")
    println("delete project dir:" + rootProject.buildDir)
    rootProject.buildDir.deleteDir()
    def dir = new File(new File(".").getAbsolutePath())
    println(" root dir:" + dir.getAbsolutePath())
    dir.eachDirRecurse {
        dir2 ->
            dir2.eachDirMatch(~/build/) {
                directory ->
                    println("delete child dir:" + directory)
                    directory.deleteDir()
            }
    }
}
