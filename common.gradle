configurations.all {
    //此处可用于解决依赖冲突问题，参阅 https://developer.android.google.cn/studio/build/dependencies#duplicate_classes
    resolutionStrategy {
        force "com.android.support:support-annotations:${supportVersion}"
        force "com.android.support:support-v4:${supportVersion}"
        force "com.android.support:appcompat-v7:${supportVersion}"
        force "com.android.support:design:${supportVersion}"
        force "com.android.support:recyclerview-v7:${supportVersion}"
        force "com.android.support:cardview-v7:${supportVersion}"
        force "com.android.support:exifinterface:${supportVersion}"
        force "com.google.code.gson:gson:${gsonVersion}"
    }
}

// {PROJECT_ROOT}/local.properties
Properties localProp = new Properties()
localProp.load(project.rootProject.file('local.properties').newDataInputStream())
// {USER_HOME}/.gradle/gradle.properties
Map rootProp = project.getProperties()

def storePathFromProperty = localProp.getProperty('signing.path', rootProp.get('signing.path', null))
def storePwdFromProperty = localProp.getProperty('signing.password', rootProp.get('signing.password', null))
def keyAliasFromProperty = localProp.getProperty('signing.alias', rootProp.get('signing.alias', null))
def keyPwdFromProperty = localProp.getProperty('signing.password', rootProp.get('signing.password', null))
def bintrayUserFromProperty = localProp.getProperty('bintray.user', rootProp.get('bintray.user', null))
def bintrayApiKeyFromProperty = localProp.getProperty('bintray.apikey', rootProp.get('bintray.apikey', null))

android.buildTypes.all { buildType ->
    localProp.any { property ->
        if (property.key == "server.api.url") {
            buildType.buildConfigField "String", "SERVER_API_URL", "\"${property.value}\""
        }
    }
}

//自定义项目属性
ext {

    //项目发布到Maven仓库的相关信息
    isLibrary = false
    libGroupName = 'cn.qqtheme.framework'
    libArtifactId = project.name
    libVersion = project.version
    libDescription = 'This is library description'
    siteUrl = 'http://qqtheme.cn'
    gitUrl = 'https://github.com/gzu-liyujiang/AndroidPicker.git'
    issueUrl = 'https://github.com/gzu-liyujiang/AndroidPicker/issues'
    licenses = ["MIT", "Anti-996"]

    //项目开发者信息
    developerId = 'liyujiang-gzu'
    developerOrg = 'gzu-liyujiang'
    developerName = '李玉江'
    developerEmail = 'liyujiang_tk@yeah.net'

    //APK打包签名信息
    propertyHaveSigningConfigs = (storePathFromProperty != null && storePwdFromProperty != null)
    propertyStorePath = storePathFromProperty
    propertyStorePwd = storePwdFromProperty
    propertyKeyAlias = keyAliasFromProperty
    propertyKeyPwd = keyPwdFromProperty

    //Bintray用户信息
    propertyHaveBintrayConfigs = (bintrayUserFromProperty != null && bintrayApiKeyFromProperty != null)
    propertyBintrayUser = bintrayUserFromProperty
    propertyBintrayApiKey = bintrayApiKeyFromProperty

}

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode rootProject.ext.appVersionCode
        versionName rootProject.ext.appVersionName
        ndk {
            //支持的CPU架构：armeabi、armeabi-v7a、arm64-v8a、x86、x86_64、mips、mips64
            //参阅 https://blog.csdn.net/u011733020/article/details/84107354
            abiFilters 'armeabi-v7a'/*, 'x86'*/
        }
    }

    buildTypes {
        release {
            debuggable false
            jniDebuggable false
            //实时构建库项目时若启用混淆，APP模块引用会造成部分方法找不到
            minifyEnabled false
        }
        debug {
            debuggable true
            jniDebuggable true
            minifyEnabled false
        }
    }

    signingConfigs {
        if (project.propertyHaveSigningConfigs) {
            debug {
                storeFile file(project.propertyStorePath)
                storePassword project.propertyStorePwd
                keyAlias project.propertyKeyAlias
                keyPassword project.propertyKeyPwd
            }

            release {
                storeFile file(project.propertyStorePath)
                storePassword project.propertyStorePwd
                keyAlias project.propertyKeyAlias
                keyPassword project.propertyKeyPwd
            }
        }
    }

    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
        }
    }

    lintOptions {
        // 如果构建时发现了致命（Fatal）的问题，会中止构建（具体由 abortOnError 控制）
        checkReleaseBuilds false
        // 设置为 true，则当 Lint 发现错误时停止 Gradle 构建
        abortOnError false
        // 设置为 true 则会生成一个 HTML 格式的报告
        //htmlReport true
        // 写入报告的路径，默认为构建目录下的 lint-results.html
        //htmlOutput file("lint-report.html")
    }

    aaptOptions {
        cruncherEnabled false
        useNewCruncher false
    }

    dexOptions {
        javaMaxHeapSize "4g"
        jumboMode = true
        preDexLibraries = true
    }

    packagingOptions {
        doNotStrip '*/mips/*.so'
        doNotStrip '*/mips64/*.so'
        exclude 'META-INF/DEPENDENCIES.txt'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/dependencies.txt'
        exclude 'META-INF/LGPL2.1'
        exclude 'META-INF/ASL2.0'
    }

}

dependencies {
    implementation "com.android.support:support-annotations:${supportVersion}"
}
